# disease_prediction_model.py

"""
Disease Prediction from Medical Data
------------------------------------
Predict the likelihood of a disease based on patient symptoms and history
using classification algorithms.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

# === Load Dataset ===
# Sample dataset: symptoms, history, diagnosis
df = pd.read_csv("data/medical_records.csv")

# === Data Preprocessing ===
# Handle missing values
df.fillna(method='ffill', inplace=True)

# Split features and target
X = df.drop("Disease", axis=1)
y = df["Disease"]

# Encode categorical features if any
for col in X.select_dtypes(include='object').columns:
    X[col] = LabelEncoder().fit_transform(X[col])

# Encode target labels
y = LabelEncoder().fit_transform(y)

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# === Train Classifier ===
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# === Predict and Evaluate ===
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# === Feature Importance ===
feature_importances = pd.Series(model.feature_importances_, index=df.columns[:-1])
feature_importances.nlargest(10).plot(kind='barh')
plt.title("Top 10 Important Features for Disease Prediction")
plt.xlabel("Importance")
plt.tight_layout()
plt.savefig("assets/disease_feature_importance.png")
plt.show()

# === Save the Model ===
import joblib
joblib.dump(model, "models/disease_prediction_model.pkl")
